!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("cronstrue")):"function"==typeof define&&define.amd?define("locales/tr.min",["cronstrue"],r):"object"==typeof exports?exports["locales/tr.min"]=r(require("cronstrue")):e["locales/tr.min"]=r(e.cronstrue)}(globalThis,(e=>(()=>{"use strict";var r={93:r=>{r.exports=e}},n={};function a(e){var t=n[e];if(void 0!==t)return t.exports;var s=n[e]={exports:{}};return r[e](s,s.exports,a),s.exports}a.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return a.d(r,{a:r}),r},a.d=(e,r)=>{for(var n in r)a.o(r,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},a.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};a.r(t);var s=a(93),o=a.n(s),u=t;Object.defineProperty(u,"__esModule",{value:!0}),u.tr=void 0;class i{atX0SecondsPastTheMinuteGt20(){return null}atX0MinutesPastTheHourGt20(){return null}commaMonthX0ThroughMonthX1(){return null}commaYearX0ThroughYearX1(){return null}use24HourTimeFormatByDefault(){return!0}everyMinute(){return"her dakika"}everyHour(){return"her saat"}anErrorOccuredWhenGeneratingTheExpressionD(){return"İfade açıklamasını oluştururken bir hata oluştu. Cron ifadesini gözden geçirin."}atSpace(){return"Saat "}everyMinuteBetweenX0AndX1(){return"Saat %s ve %s arasındaki her dakika"}at(){return"Saat"}spaceAnd(){return" ve"}everySecond(){return"her saniye"}everyX0Seconds(){return"her %s saniyede bir"}secondsX0ThroughX1PastTheMinute(){return"dakikaların %s. ve %s. saniyeleri arası"}atX0SecondsPastTheMinute(){return"dakikaların %s. saniyesinde"}everyX0Minutes(){return"her %s dakikada bir"}minutesX0ThroughX1PastTheHour(){return"saatlerin %s. ve %s. dakikaları arası"}atX0MinutesPastTheHour(){return"saatlerin %s. dakikasında"}everyX0Hours(){return"her %s saatte"}betweenX0AndX1(){return"%s ile %s arasında"}atX0(){return"saat %s"}commaEveryDay(){return", her gün"}commaEveryX0DaysOfTheWeek(){return", ayın her %s günü"}commaX0ThroughX1(){return", %s ile %s arasında"}commaAndX0ThroughX1(){return", ve %s ile %s arasında"}first(){return"ilk"}second(){return"ikinci"}third(){return"üçüncü"}fourth(){return"dördüncü"}fifth(){return"beşinci"}commaOnThe(){return", ayın "}spaceX0OfTheMonth(){return" %s günü"}lastDay(){return"son gün"}commaOnTheLastX0OfTheMonth(){return", ayın son %s günü"}commaOnlyOnX0(){return", sadece %s günü"}commaAndOnX0(){return", ve %s"}commaEveryX0Months(){return", %s ayda bir"}commaOnlyInX0(){return", sadece %s için"}commaOnTheLastDayOfTheMonth(){return", ayın son günü"}commaOnTheLastWeekdayOfTheMonth(){return", ayın son iş günü"}commaDaysBeforeTheLastDayOfTheMonth(){return", %s ayın son gününden önceki günler"}firstWeekday(){return"ilk iş günü"}weekdayNearestDayX0(){return"%s. günü sonrasındaki ilk iş günü"}commaOnTheX0OfTheMonth(){return", ayın %s"}commaEveryX0Days(){return", %s günde bir"}commaBetweenDayX0AndX1OfTheMonth(){return", ayın %s. ve %s. günleri arası"}commaOnDayX0OfTheMonth(){return", ayın %s. günü"}commaEveryX0Years(){return", %s yılda bir"}commaStartingX0(){return", başlangıç %s"}daysOfTheWeek(){return["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"]}monthsOfTheYear(){return["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"]}}return u.tr=i,o().locales.tr=new i,t})()));